//
// This file was generated by the Eclipse Implementation of JAXB, v3.0.0 
// See https://eclipse-ee4j.github.io/jaxb-ri 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2024.02.21 at 09:49:19 PM AEDT 
//


package com.mentor.harness.schema.bridgesharness;

import jakarta.xml.bind.annotation.XmlEnum;
import jakarta.xml.bind.annotation.XmlEnumValue;
import jakarta.xml.bind.annotation.XmlType;


/**
 * <p>Java class for MulticoreTypeAttribute.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <pre>
 * &lt;simpleType name="MulticoreTypeAttribute"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}NMTOKEN"&gt;
 *     &lt;enumeration value="coax"/&gt;
 *     &lt;enumeration value="oval"/&gt;
 *     &lt;enumeration value="twist-commercial"/&gt;
 *     &lt;enumeration value="twist-military"/&gt;
 *     &lt;enumeration value="twist-z"/&gt;
 *     &lt;enumeration value="sheath"/&gt;
 *     &lt;enumeration value="unk"/&gt;
 *     &lt;enumeration value="overbraid"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "MulticoreTypeAttribute")
@XmlEnum
public enum MulticoreTypeAttribute {

    @XmlEnumValue("coax")
    COAX("coax"),
    @XmlEnumValue("oval")
    OVAL("oval"),
    @XmlEnumValue("twist-commercial")
    TWIST_COMMERCIAL("twist-commercial"),
    @XmlEnumValue("twist-military")
    TWIST_MILITARY("twist-military"),
    @XmlEnumValue("twist-z")
    TWIST_Z("twist-z"),
    @XmlEnumValue("sheath")
    SHEATH("sheath"),
    @XmlEnumValue("unk")
    UNK("unk"),
    @XmlEnumValue("overbraid")
    OVERBRAID("overbraid");
    private final String value;

    MulticoreTypeAttribute(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static MulticoreTypeAttribute fromValue(String v) {
        for (MulticoreTypeAttribute c: MulticoreTypeAttribute.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
